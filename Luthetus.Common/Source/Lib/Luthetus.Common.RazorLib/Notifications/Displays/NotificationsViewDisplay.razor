@using Fluxor.Blazor.Web.Components;
@using Luthetus.Common.RazorLib.Notifications.Models;
@using System.Collections.Immutable;

@inherits FluxorComponent

@{ var notificationRecordsCollection = NotificationStateWrap.Value; }

<div class="luth_web_notifications-view">
    <div class="luth_web_notifications-view-tabs">
        @foreach (var notificationsViewKind in Enum.GetValues<NotificationsViewKind>())
        {
            <button class="luth_web_notifications-view-tab-entry luth_button @GetIsActiveCssClass(_chosenNotificationsViewKind, notificationsViewKind)"
                    @onclick="() => _chosenNotificationsViewKind = notificationsViewKind">

                @notificationsViewKind

                <span class="luth_web_notifications-view-tab-entry-count">
                    (<!--
                    -->@switch (notificationsViewKind)
                    {
                        case NotificationsViewKind.Notifications:
                            @: @notificationRecordsCollection.DefaultList.Count
                            break;
                        case NotificationsViewKind.Read:
                            @: @notificationRecordsCollection.ReadList.Count
                            break;
                        case NotificationsViewKind.Deleted:
                            @: @notificationRecordsCollection.DeletedList.Count
                            break;
                        case NotificationsViewKind.Archived:
                            @: @notificationRecordsCollection.ArchivedList.Count
                            break;
                    }<!--
                    -->)
                </span>
            </button>
        }
    </div>

    <div class="luth_web_notifications-view-body">
        @{
            var entriesToRenderList = ImmutableList<NotificationRecord>.Empty;
            var clearOnClick = new Action(() => { });

            switch (_chosenNotificationsViewKind)
            {
                case NotificationsViewKind.Notifications:
                    entriesToRenderList = notificationRecordsCollection.DefaultList;
                    clearOnClick = Clear;
                    break;
                case NotificationsViewKind.Read:
                    entriesToRenderList = notificationRecordsCollection.ReadList;
                    clearOnClick = ClearRead;
                    break;
                case NotificationsViewKind.Deleted:
                    entriesToRenderList = notificationRecordsCollection.DeletedList;
                    clearOnClick = ClearDeleted;
                    break;
                case NotificationsViewKind.Archived:
                    entriesToRenderList = notificationRecordsCollection.ArchivedList;
                    clearOnClick = ClearArchived;
                    break;
            }

            <button class="luth_button"
                    @onclick="clearOnClick">
                Clear @_chosenNotificationsViewKind
            </button>

            foreach (var entry in entriesToRenderList)
            {
                <div @key="entry.Key"
                     class="luth_web_notifications-view-body-entry">
                    
                    <CascadingValue Value="entry">
                        <DynamicComponent Type="entry.RendererType"
                                          Parameters="entry.ParameterMap" />
                    </CascadingValue>
                </div>

                <hr/>
            }
        }
    </div>
</div>