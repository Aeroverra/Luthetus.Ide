@using Luthetus.Common.RazorLib.Keys.Models
@using Luthetus.Ide.RazorLib.TreeViewImplementations.Models
@using Luthetus.Ide.RazorLib.Terminals.Models;
@using Luthetus.Ide.RazorLib.Terminals.Displays;
@using Luthetus.TextEditor.RazorLib.TextEditors.Displays.Internals
@using Luthetus.TextEditor.RazorLib.TextEditors.Models

<div class="luth_ide_test-explorer-details"
	 style="@ElementDimensions.StyleString">

	@{ var activeNode = RenderBatch.TreeViewContainer.ActiveNode; }

	<div style="height: 100%;">
		@if (activeNode is TreeViewStringFragment treeViewStringFragment)
		{
			var executionTerminal = TerminalStateWrap.Value.TerminalMap[TerminalFacts.EXECUTION_TERMINAL_KEY];

			var success = executionTerminal.TryGetTerminalCommandViewModelKey(
				treeViewStringFragment.Item.DotNetTestByFullyQualifiedNameFormattedTerminalCommandKey,
				out var viewModelKey);

			if (!success || viewModelKey == Key<TextEditorViewModel>.Empty)
			{
				executionTerminal.CreateTextEditorForCommandOutput(
					treeViewStringFragment.Item.DotNetTestByFullyQualifiedNameFormattedTerminalCommandKey);
			}
			else
			{
				<ReadOnlyTextEditorViewModelDisplay TextEditorViewModelKey="viewModelKey"/>
			}
		}
		else if (activeNode is TreeViewProjectTestModel treeViewProjectTestModel)
		{
			var executionTerminal = TerminalStateWrap.Value.TerminalMap[TerminalFacts.EXECUTION_TERMINAL_KEY];

			var success = executionTerminal.TryGetTerminalCommandViewModelKey(
				treeViewProjectTestModel.Item.DotNetTestListTestsTerminalCommandKey,
				out var viewModelKey);

			if (!success || viewModelKey == Key<TextEditorViewModel>.Empty)
			{
				executionTerminal.CreateTextEditorForCommandOutput(
					treeViewProjectTestModel.Item.DotNetTestListTestsTerminalCommandKey);
			}
			else
			{
				<ReadOnlyTextEditorViewModelDisplay TextEditorViewModelKey="viewModelKey" />
			}
		}
		else if (activeNode is not null)
		{
			<text>@(activeNode.GetType().Name)</text>
		}
		else
		{
			<text>activeNode is null</text>
		}
	</div>
</div>