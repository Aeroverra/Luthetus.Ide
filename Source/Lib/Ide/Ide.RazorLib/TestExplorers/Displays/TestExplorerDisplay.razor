@using Luthetus.Common.RazorLib.Contexts.Displays
@using Luthetus.Common.RazorLib.Contexts.Models
@using Luthetus.Common.RazorLib.Resizes.Displays
@using Luthetus.Ide.RazorLib.TestExplorers.Displays.Internals
@using Luthetus.Ide.RazorLib.TestExplorers.States
@using Luthetus.Ide.RazorLib.TestExplorers.Models

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@{
	var testExplorerState = TestExplorerStateWrap.Value;
	var appOptionsState = AppOptionsStateWrap.Value;

	if (!TreeViewService.TryGetTreeViewContainer(
			TestExplorerState.TreeViewTestExplorerKey,
			out var treeViewContainer))
	{
		treeViewContainer = null;
	}

	var renderBatch = new TestExplorerRenderBatch(
		testExplorerState,
		appOptionsState,
		treeViewContainer);
}

<ContextBoundary ContextRecord="ContextFacts.TestExplorerContext"
                 ClassCssString="luth_ide_test-explorer"
                 StyleCssString="height: 100%; width: 100%;">

    <div class="luth_ide_section-title">
        Test Explorer
    </div>

    <div class="luth_ide_section-body">

		@if (renderBatch.TreeViewContainer is null)
		{
			<div>renderBatch.TreeViewContainer is null</div>
		}
		else
		{
			var renderBatchValidated = new TestExplorerRenderBatchValidated(renderBatch);
			<CascadingValue Value="renderBatchValidated">

				<div class="luth_ide_test-explorer-top"
				     style="height: 1.8em;">
					Total: @(renderBatchValidated.TestExplorerState.TotalTestCount);
					Passed: 0;
					Failed: 0;
					Sln: @(renderBatchValidated.TestExplorerState.SolutionFilePath ?? "null");
				</div>

				<div class="luth_ide_test-explorer-bottom"
					 style="display: flex; height: calc(100% - 1.8em);">

					<TestExplorerTreeViewDisplay ElementDimensions="_treeViewElementDimensions"/>

					<ResizableColumn LeftElementDimensions="_treeViewElementDimensions"
									 RightElementDimensions="_detailsElementDimensions"
									 ReRenderFuncAsync="async () => await InvokeAsync(StateHasChanged).ConfigureAwait(false)" />

					<TestExplorerDetailsDisplay ElementDimensions="_detailsElementDimensions"/>
				</div>
			</CascadingValue>
		}
    </div>
</ContextBoundary>
