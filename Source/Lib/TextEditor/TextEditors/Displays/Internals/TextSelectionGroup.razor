@using Luthetus.TextEditor.RazorLib.Cursors.Models;
@using Luthetus.TextEditor.RazorLib.Lexers.Models

<div class="luth_te_text-selection-group">
    @if (TextEditorSelectionHelper.HasSelectedText(PrimaryCursor.Selection))
    {
        var selectionBoundsInPositionIndexUnits = TextEditorSelectionHelper.GetSelectionBounds(
            PrimaryCursor.Selection);

        var selectionBoundsInRowIndexUnits = GetSelectionBoundsInRowIndexUnits(selectionBoundsInPositionIndexUnits);

        var nullableVirtualLowerBoundInclusiveRowIndex = RenderBatch.ViewModel!.VirtualizationResult.EntryList.FirstOrDefault()?.Index;
        var nullableVirtualUpperBoundExclusiveRowIndex = 1 + RenderBatch.ViewModel.VirtualizationResult.EntryList.FirstOrDefault()?.Index;

        if (nullableVirtualLowerBoundInclusiveRowIndex is not null &&
            nullableVirtualUpperBoundExclusiveRowIndex is not null)
        {
            var virtualLowerBoundInclusiveRowIndex = nullableVirtualLowerBoundInclusiveRowIndex.Value;
            var virtualUpperBoundExclusiveRowIndex = nullableVirtualUpperBoundExclusiveRowIndex.Value;

            int useLowerBoundInclusiveRowIndex = virtualLowerBoundInclusiveRowIndex >= selectionBoundsInRowIndexUnits.lowerRowIndexInclusive
                ? virtualLowerBoundInclusiveRowIndex
                : selectionBoundsInRowIndexUnits.lowerRowIndexInclusive;
            
            int useUpperBoundExclusiveRowIndex = virtualUpperBoundExclusiveRowIndex <= selectionBoundsInRowIndexUnits.upperRowIndexExclusive
                ? virtualUpperBoundExclusiveRowIndex
                : selectionBoundsInRowIndexUnits.upperRowIndexExclusive;

            for (var badIndex = useLowerBoundInclusiveRowIndex; badIndex < useUpperBoundExclusiveRowIndex; badIndex++)
            {
                var rowIndex = badIndex;
                var textSelectionStyleCss = string.Empty;

                if (RenderBatch.Options!.UseMonospaceOptimizations)
                {
                    textSelectionStyleCss = GetTextSelectionStyleCss(
                        selectionBoundsInPositionIndexUnits.lowerPositionIndexInclusive,
                        selectionBoundsInPositionIndexUnits.upperPositionIndexExclusive,
                        rowIndex);
                }
            
                <TextSelectionRow TextSelectionStyleCss="@textSelectionStyleCss"
                                  LowerPositionIndexInclusive="selectionBoundsInPositionIndexUnits.lowerPositionIndexInclusive"
                                  UpperPositionIndexExclusive="selectionBoundsInPositionIndexUnits.upperPositionIndexExclusive"
                                  RowIndex="rowIndex"/>
            }
        }
    }
</div>