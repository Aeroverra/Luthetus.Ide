@using Fluxor
@using Luthetus.Common.RazorLib.Installations.Models
@using Luthetus.Common.RazorLib.BackgroundTasks.Models
@using Luthetus.Common.RazorLib.Dialogs.Models
@using Luthetus.Common.RazorLib.Dialogs.Displays
@using Luthetus.Common.RazorLib.Dynamics.Models
@using Luthetus.Common.RazorLib.Keys.Models
@using Luthetus.Common.RazorLib.Notifications.Displays
@using Luthetus.Common.RazorLib.Notifications.Models
@using Luthetus.TextEditor.RazorLib.Installations.Models
@using Luthetus.Ide.RazorLib.Installations.Models

@inherits TestContext
@code
{
	[Fact]
	public void NotificationInitializerRendersCorrectly()
	{
		SharedInitializationForTests.Initialize(this);
		
		var cut = Render(@<NotificationInitializer/>);

		// Assert initially empty
		cut.MarkupMatches(string.Empty);
		var allNotificationList = cut.FindAll(".luth_notification");
		Assert.Equal(0, allNotificationList.Count);

		var notificationService = Services.GetService<INotificationService>();

		// Register a single notification
		{
			var notification = new NotificationViewModel(
		        Key<IDynamicViewModel>.NewKey(),
		        "Unit Testing First",
		        typeof(CommonInformativeNotificationDisplay),
		        null,
		        null,
		        true,
		        null);
			
			notificationService.RegisterNotificationRecord(notification);
	
			// Assert notification rendered
			allNotificationList = cut.FindAll(".luth_notification");
			Assert.Equal(1, allNotificationList.Count);
		}

		// Register a second notification.
		{
			var notification = new NotificationViewModel(
		        Key<IDynamicViewModel>.NewKey(),
		        "Unit Testing Second",
		        typeof(CommonInformativeNotificationDisplay),
		        null,
		        null,
		        true,
		        null);
			
			notificationService.RegisterNotificationRecord(notification);
	
			// Assert notification rendered
			allNotificationList = cut.FindAll(".luth_notification");
			Assert.Equal(2, allNotificationList.Count);
		}
	}
}