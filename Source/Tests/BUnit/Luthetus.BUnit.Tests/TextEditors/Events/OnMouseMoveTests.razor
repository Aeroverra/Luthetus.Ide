@using Fluxor
@using Luthetus.Common.RazorLib.Installations.Models
@using Luthetus.Common.RazorLib.BackgroundTasks.Models
@using Luthetus.Common.RazorLib.Dialogs.Models
@using Luthetus.Common.RazorLib.Dialogs.Displays
@using Luthetus.Common.RazorLib.Dynamics.Models
@using Luthetus.Common.RazorLib.Keys.Models
@using Luthetus.Common.RazorLib.Notifications.Displays
@using Luthetus.Common.RazorLib.Notifications.Models
@using Luthetus.TextEditor.RazorLib
@using Luthetus.TextEditor.RazorLib.Events.Models
@using Luthetus.TextEditor.RazorLib.Installations.Models
@using Luthetus.TextEditor.RazorLib.TextEditors.Models
@using Luthetus.TextEditor.RazorLib.Lexers.Models
@using Luthetus.TextEditor.RazorLib.TextEditors.Displays
@using Luthetus.Ide.RazorLib.Installations.Models

@inherits EditLogicTestBase
@code
{
	[Fact]
	public async Task BatchOrDefault_OnMouseMove_OnMouseMove()
    {
		var testData = EditLogicTestsInitialize(string.Empty);

		// Assert that 'AllText' does not change, since this event should do nothing.        
		Assert.Equal(string.Empty, testData.InModel.AllText);

		var upstreamOnMouseMove = new OnMouseMove(
	        new MouseEventArgs { },
	        testData.ComponentData,
	        testData.InModel.ResourceUri,
	        testData.ViewModelKey);
		testData.TextEditorService.Post(upstreamOnMouseMove);

		var downstreamOnMouseMove = new OnMouseMove(
	        new MouseEventArgs { },
	        testData.ComponentData,
	        testData.InModel.ResourceUri,
	        testData.ViewModelKey);
		testData.TextEditorService.Post(downstreamOnMouseMove);

		var backgroundTaskService = Services.GetService<IBackgroundTaskService>();
		var queue = backgroundTaskService.GetQueue(ContinuousBackgroundTaskWorker.GetQueueKey());
		
		// Consecutive events of this kind are redundant;
		// one can just take the most recent, and discard the rest.
		Assert.Equal(1, queue.Count);
		Assert.Equal(downstreamOnMouseMove, queue.BackgroundTaskList.Single());
        
		var backgroundTasksHandle = SharedInitializationForTests.StartBackgroundTasks(this);
		await backgroundTasksHandle.Stop();
        
		var outModel = testData.TextEditorService.ModelApi.GetOrDefault(testData.InModel.ResourceUri);

		// Assert that 'AllText' does not change, since this event should do nothing.        
		Assert.Equal(string.Empty, outModel.AllText);
    }

	[Fact]
	public async Task BatchOrDefault_OnMouseMove_SomeDifferentType()
    {
		var testData = EditLogicTestsInitialize(string.Empty);

		// Assert that 'AllText' does not change, since this event should do nothing.        
		Assert.Equal(string.Empty, testData.InModel.AllText);

		var upstreamOnDoubleClick = new OnDoubleClick(
	        new MouseEventArgs { },
	        testData.ComponentData,
	        testData.InModel.ResourceUri,
	        testData.ViewModelKey);
		testData.TextEditorService.Post(upstreamOnDoubleClick);

		var downstreamOnMouseMove = new OnMouseMove(
	        new MouseEventArgs { },
	        testData.ComponentData,
	        testData.InModel.ResourceUri,
	        testData.ViewModelKey);
		testData.TextEditorService.Post(downstreamOnMouseMove);

		var backgroundTaskService = Services.GetService<IBackgroundTaskService>();
		var queue = backgroundTaskService.GetQueue(ContinuousBackgroundTaskWorker.GetQueueKey());
		
		// Do not overwrite an upstream event that is not of the same type.
		Assert.Equal(2, queue.Count);
		Assert.Equal(upstreamOnDoubleClick, queue.BackgroundTaskList[0]);
		Assert.Equal(downstreamOnMouseMove, queue.BackgroundTaskList[1]);
        
		var backgroundTasksHandle = SharedInitializationForTests.StartBackgroundTasks(this);
		await backgroundTasksHandle.Stop();
        
		var outModel = testData.TextEditorService.ModelApi.GetOrDefault(testData.InModel.ResourceUri);

		// Assert that 'AllText' does not change, since this event should do nothing.        
		Assert.Equal(string.Empty, outModel.AllText);
    }

	[Fact]
    public async Task HandleEvent_Result()
    {
		var testData = EditLogicTestsInitialize(string.Empty);

		var onMouseMove = new OnMouseMove(
	        new MouseEventArgs { },
	        testData.ComponentData,
	        testData.InModel.ResourceUri,
	        testData.ViewModelKey);
  
		// Assert that 'AllText' does not change, since this event should do nothing.      
		Assert.Equal(string.Empty, testData.InModel.AllText);

		testData.TextEditorService.Post(onMouseMove);
        
		var backgroundTasksHandle = SharedInitializationForTests.StartBackgroundTasks(this);
		await backgroundTasksHandle.Stop();
        
		var outModel = testData.TextEditorService.ModelApi.GetOrDefault(testData.InModel.ResourceUri);

		// Assert that 'AllText' does not change, since this event should do nothing.        
		Assert.Equal(string.Empty, outModel.AllText);
    }
}
