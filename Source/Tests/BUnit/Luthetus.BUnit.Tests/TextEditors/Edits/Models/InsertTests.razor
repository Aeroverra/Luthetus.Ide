@using Fluxor
@using Luthetus.Common.RazorLib.Installations.Models
@using Luthetus.Common.RazorLib.BackgroundTasks.Models
@using Luthetus.Common.RazorLib.Dialogs.Models
@using Luthetus.Common.RazorLib.Dialogs.Displays
@using Luthetus.Common.RazorLib.Dynamics.Models
@using Luthetus.Common.RazorLib.Keys.Models
@using Luthetus.Common.RazorLib.Notifications.Displays
@using Luthetus.Common.RazorLib.Notifications.Models
@using Luthetus.TextEditor.RazorLib
@using Luthetus.TextEditor.RazorLib.Events.Models
@using Luthetus.TextEditor.RazorLib.Installations.Models
@using Luthetus.TextEditor.RazorLib.TextEditors.Models
@using Luthetus.TextEditor.RazorLib.Lexes.Models
@using Luthetus.TextEditor.RazorLib.TextEditors.Displays
@using Luthetus.TextEditor.RazorLib.Exceptions
@using Luthetus.Ide.RazorLib.Installations.Models

@inherits TestContext
@code
{
	[Fact]
	public async Task Insert_Case_One()
	{
		// Construct
		var testData = EditLogicTestsInitialize(string.Empty);
		Assert.Equal(string.Empty, testData.InModel.AllText);
		Assert.Equal(1, testData.InModel.EditBlockList.Count);

		var backgroundTaskService = Services.GetService<IBackgroundTaskService>();
		var queue = backgroundTaskService.GetQueue(ContinuousBackgroundTaskWorker.GetQueueKey());

		await testData.TextEditorService.PostSimpleBatch(
			nameof(RewriteEditLogicTests),
			editContext =>
			{
				var modelModifier = editContext.GetModelModifier(testData.InModel.ResourceUri);
				var viewModelModifier = editContext.GetViewModelModifier(testData.ViewModelKey);
				var cursorModifierBag = editContext.GetCursorModifierBag(viewModelModifier?.ViewModel);
				var primaryCursorModifier = editContext.GetPrimaryCursorModifier(cursorModifierBag);

				if (modelModifier is null || viewModelModifier is null || cursorModifierBag is null || primaryCursorModifier is null)
					return Task.CompletedTask;

				var textEditor = modelModifier;

				// Insert One
				{
					var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(0);
					primaryCursorModifier.LineIndex = lineIndex;
					primaryCursorModifier.ColumnIndex = columnIndex;

					textEditor.Insert(
						"Hello",
				        cursorModifierBag,
				        useLineEndKindPreference: false);

					Assert.Equal("Hello", textEditor.AllText);
					Assert.Equal(2, textEditor.EditBlockList.Count);
					Assert.Equal(1, textEditor.EditBlockIndex);
				}
		
				// Insert Two
				{
					var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(0);
					primaryCursorModifier.LineIndex = lineIndex;
					primaryCursorModifier.ColumnIndex = columnIndex;

					textEditor.Insert(
						"Abc",
				        cursorModifierBag,
				        useLineEndKindPreference: false);

					Assert.Equal("AbcHello", textEditor.AllText);
					Assert.Equal(3, textEditor.EditBlockList.Count);
					Assert.Equal(2, textEditor.EditBlockIndex);
				}
		
				// undo, undo, redo, redo
				
				// Undo One
				textEditor.UndoEdit();
				Assert.Equal("Hello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(1, textEditor.EditBlockIndex);
		
				// Undo Two
				textEditor.UndoEdit();
				Assert.Equal(string.Empty, textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(0, textEditor.EditBlockIndex);
		
				// Redo One
				textEditor.RedoEdit();
				Assert.Equal("Hello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(1, textEditor.EditBlockIndex);
		
				// Redo Two
				textEditor.RedoEdit();
				Assert.Equal("AbcHello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(2, textEditor.EditBlockIndex);

				return Task.CompletedTask;
			});

		await SharedInitializationForTests
			.StartBackgroundTasks(this)
			.Stop();
	}

	[Fact]
	public async Task Insert_Case_Two()
	{
		// Construct
		var testData = EditLogicTestsInitialize(string.Empty);
		Assert.Equal(string.Empty, testData.InModel.AllText);
		Assert.Equal(1, testData.InModel.EditBlockList.Count);

		var backgroundTaskService = Services.GetService<IBackgroundTaskService>();
		var queue = backgroundTaskService.GetQueue(ContinuousBackgroundTaskWorker.GetQueueKey());

		await testData.TextEditorService.PostSimpleBatch(
			nameof(RewriteEditLogicTests),
			editContext =>
			{
				var modelModifier = editContext.GetModelModifier(testData.InModel.ResourceUri);
				var viewModelModifier = editContext.GetViewModelModifier(testData.ViewModelKey);
				var cursorModifierBag = editContext.GetCursorModifierBag(viewModelModifier?.ViewModel);
				var primaryCursorModifier = editContext.GetPrimaryCursorModifier(cursorModifierBag);

				if (modelModifier is null || viewModelModifier is null || cursorModifierBag is null || primaryCursorModifier is null)
					return Task.CompletedTask;

				var textEditor = modelModifier;

				// Insert One
				{
					var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(0);
					primaryCursorModifier.LineIndex = lineIndex;
					primaryCursorModifier.ColumnIndex = columnIndex;

					textEditor.Insert(
						"Hello",
				        cursorModifierBag,
				        useLineEndKindPreference: false);

					Assert.Equal("Hello", textEditor.AllText);
					Assert.Equal(2, textEditor.EditBlockList.Count);
					Assert.Equal(1, textEditor.EditBlockIndex);
				}
		
				// Insert Two
				{
					var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(0);
					primaryCursorModifier.LineIndex = lineIndex;
					primaryCursorModifier.ColumnIndex = columnIndex;

					textEditor.Insert(
						"Abc",
				        cursorModifierBag,
				        useLineEndKindPreference: false);

					Assert.Equal("AbcHello", textEditor.AllText);
					Assert.Equal(3, textEditor.EditBlockList.Count);
					Assert.Equal(2, textEditor.EditBlockIndex);
				}
		
				// redo, undo, undo, redo
				
				// Redo One
				Assert.Throws<LuthetusTextEditorException>(textEditor.Redo);
		
				// Undo One
				textEditor.Undo();
				Assert.Equal("Hello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(1, textEditor.EditBlockIndex);
		
				// Undo Two
				textEditor.Undo();
				Assert.Equal(string.Empty, textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(0, textEditor.EditBlockIndex);
		
				// Redo Two
				textEditor.Redo();
				Assert.Equal("Hello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(1, textEditor.EditBlockIndex);

				return Task.CompletedTask;
			});

		await SharedInitializationForTests
			.StartBackgroundTasks(this)
			.Stop();
	}

	[Fact]
	public async Task Insert_Case_Three()
	{
		// Construct
		var testData = EditLogicTestsInitialize(string.Empty);
		Assert.Equal(string.Empty, testData.InModel.AllText);
		Assert.Equal(1, testData.InModel.EditBlockList.Count);

		var backgroundTaskService = Services.GetService<IBackgroundTaskService>();
		var queue = backgroundTaskService.GetQueue(ContinuousBackgroundTaskWorker.GetQueueKey());

		await testData.TextEditorService.PostSimpleBatch(
			nameof(RewriteEditLogicTests),
			editContext =>
			{
				var modelModifier = editContext.GetModelModifier(testData.InModel.ResourceUri);
				var viewModelModifier = editContext.GetViewModelModifier(testData.ViewModelKey);
				var cursorModifierBag = editContext.GetCursorModifierBag(viewModelModifier?.ViewModel);
				var primaryCursorModifier = editContext.GetPrimaryCursorModifier(cursorModifierBag);

				if (modelModifier is null || viewModelModifier is null || cursorModifierBag is null || primaryCursorModifier is null)
					return Task.CompletedTask;

				var textEditor = modelModifier;

				// Insert One
				{
					var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(0);
					primaryCursorModifier.LineIndex = lineIndex;
					primaryCursorModifier.ColumnIndex = columnIndex;

					textEditor.Insert(
						"Hello",
				        cursorModifierBag,
				        useLineEndKindPreference: false);

					Assert.Equal("Hello", textEditor.AllText);
					Assert.Equal(2, textEditor.EditBlockList.Count);
					Assert.Equal(1, textEditor.EditBlockIndex);
				}
		
				// Insert Two
				{
					var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(0);
					primaryCursorModifier.LineIndex = lineIndex;
					primaryCursorModifier.ColumnIndex = columnIndex;

					textEditor.Insert(
						"Abc",
				        cursorModifierBag,
				        useLineEndKindPreference: false);

					Assert.Equal("AbcHello", textEditor.AllText);
					Assert.Equal(3, textEditor.EditBlockList.Count);
					Assert.Equal(2, textEditor.EditBlockIndex);
				}
		
				// undo, redo, undo, redo
				
				// Undo One
				textEditor.Undo();
				Assert.Equal("Hello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(1, textEditor.EditBlockIndex);
		
				// Redo One
				textEditor.Redo();
				Assert.Equal("AbcHello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(2, textEditor.EditBlockIndex);
		
				// Undo Two
				textEditor.Undo();
				Assert.Equal("Hello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(1, textEditor.EditBlockIndex);
		
				// Redo Two
				textEditor.Redo();
				Assert.Equal("AbcHello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(2, textEditor.EditBlockIndex);

				return Task.CompletedTask;
			});

		await SharedInitializationForTests
			.StartBackgroundTasks(this)
			.Stop();
	}

	[Fact]
	public async Task Insert_Case_Four()
	{
		// Construct
		var testData = EditLogicTestsInitialize(string.Empty);
		Assert.Equal(string.Empty, testData.InModel.AllText);
		Assert.Equal(1, testData.InModel.EditBlockList.Count);

		var backgroundTaskService = Services.GetService<IBackgroundTaskService>();
		var queue = backgroundTaskService.GetQueue(ContinuousBackgroundTaskWorker.GetQueueKey());

		await testData.TextEditorService.PostSimpleBatch(
			nameof(RewriteEditLogicTests),
			editContext =>
			{
				var modelModifier = editContext.GetModelModifier(testData.InModel.ResourceUri);
				var viewModelModifier = editContext.GetViewModelModifier(testData.ViewModelKey);
				var cursorModifierBag = editContext.GetCursorModifierBag(viewModelModifier?.ViewModel);
				var primaryCursorModifier = editContext.GetPrimaryCursorModifier(cursorModifierBag);

				if (modelModifier is null || viewModelModifier is null || cursorModifierBag is null || primaryCursorModifier is null)
					return Task.CompletedTask;

				var textEditor = modelModifier;

				// Insert One
				{
					var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(0);
					primaryCursorModifier.LineIndex = lineIndex;
					primaryCursorModifier.ColumnIndex = columnIndex;

					textEditor.Insert(
						"Hello",
				        cursorModifierBag,
				        useLineEndKindPreference: false);

					Assert.Equal("Hello", textEditor.AllText);
					Assert.Equal(2, textEditor.EditBlockList.Count);
					Assert.Equal(1, textEditor.EditBlockIndex);
				}
		
				// Insert Two
				{
					var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(0);
					primaryCursorModifier.LineIndex = lineIndex;
					primaryCursorModifier.ColumnIndex = columnIndex;

					textEditor.Insert(
						"Abc",
				        cursorModifierBag,
				        useLineEndKindPreference: false);

					Assert.Equal("AbcHello", textEditor.AllText);
					Assert.Equal(3, textEditor.EditBlockList.Count);
					Assert.Equal(2, textEditor.EditBlockIndex);
				}
		
				// undo, redo, redo, undo
				
				// Undo One
				textEditor.Undo();
				Assert.Equal("Hello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(1, textEditor.EditBlockIndex);
		
				// Redo One
				textEditor.Redo();
				Assert.Equal("AbcHello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(2, textEditor.EditBlockIndex);
		
				// Redo Two
				Assert.Throws<LuthetusTextEditorException>(textEditor.Redo);
		
				// Undo Two
				textEditor.Undo();
				Assert.Equal("Hello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(1, textEditor.EditBlockIndex);

				return Task.CompletedTask;
			});

		await SharedInitializationForTests
			.StartBackgroundTasks(this)
			.Stop();
	}

	[Fact]
	public async Task Insert_Case_Five()
	{
		// Construct
		var testData = EditLogicTestsInitialize(string.Empty);
		Assert.Equal(string.Empty, testData.InModel.AllText);
		Assert.Equal(1, testData.InModel.EditBlockList.Count);

		var backgroundTaskService = Services.GetService<IBackgroundTaskService>();
		var queue = backgroundTaskService.GetQueue(ContinuousBackgroundTaskWorker.GetQueueKey());

		await testData.TextEditorService.PostSimpleBatch(
			nameof(RewriteEditLogicTests),
			editContext =>
			{
				var modelModifier = editContext.GetModelModifier(testData.InModel.ResourceUri);
				var viewModelModifier = editContext.GetViewModelModifier(testData.ViewModelKey);
				var cursorModifierBag = editContext.GetCursorModifierBag(viewModelModifier?.ViewModel);
				var primaryCursorModifier = editContext.GetPrimaryCursorModifier(cursorModifierBag);

				if (modelModifier is null || viewModelModifier is null || cursorModifierBag is null || primaryCursorModifier is null)
					return Task.CompletedTask;

				var textEditor = modelModifier;

				// Insert One
				{
					var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(0);
					primaryCursorModifier.LineIndex = lineIndex;
					primaryCursorModifier.ColumnIndex = columnIndex;

					textEditor.Insert(
						"Hello",
				        cursorModifierBag,
				        useLineEndKindPreference: false);

					Assert.Equal("Hello", textEditor.AllText);
					Assert.Equal(2, textEditor.EditBlockList.Count);
					Assert.Equal(1, textEditor.EditBlockIndex);
				}
		
				// Insert Two
				{
					var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(0);
					primaryCursorModifier.LineIndex = lineIndex;
					primaryCursorModifier.ColumnIndex = columnIndex;

					textEditor.Insert(
						"Abc",
				        cursorModifierBag,
				        useLineEndKindPreference: false);

					Assert.Equal("AbcHello", textEditor.AllText);
					Assert.Equal(3, textEditor.EditBlockList.Count);
					Assert.Equal(2, textEditor.EditBlockIndex);
				}
		
				// redo, undo, redo, undo
				
				// Redo One
				Assert.Throws<LuthetusTextEditorException>(textEditor.Redo);
		
				// Undo One
				textEditor.Undo();
				Assert.Equal("Hello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(1, textEditor.EditBlockIndex);
		
				// Redo Two
				textEditor.Redo();
				Assert.Equal("AbcHello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(2, textEditor.EditBlockIndex);
		
				// Undo Two
				textEditor.Undo();
				Assert.Equal("Hello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(1, textEditor.EditBlockIndex);

				return Task.CompletedTask;
			});

		await SharedInitializationForTests
			.StartBackgroundTasks(this)
			.Stop();
	}

	[Fact]
	public async Task Insert_Case_Six()
	{
		// Construct
		var testData = EditLogicTestsInitialize(string.Empty);
		Assert.Equal(string.Empty, testData.InModel.AllText);
		Assert.Equal(1, testData.InModel.EditBlockList.Count);

		var backgroundTaskService = Services.GetService<IBackgroundTaskService>();
		var queue = backgroundTaskService.GetQueue(ContinuousBackgroundTaskWorker.GetQueueKey());

		await testData.TextEditorService.PostSimpleBatch(
			nameof(RewriteEditLogicTests),
			editContext =>
			{
				var modelModifier = editContext.GetModelModifier(testData.InModel.ResourceUri);
				var viewModelModifier = editContext.GetViewModelModifier(testData.ViewModelKey);
				var cursorModifierBag = editContext.GetCursorModifierBag(viewModelModifier?.ViewModel);
				var primaryCursorModifier = editContext.GetPrimaryCursorModifier(cursorModifierBag);

				if (modelModifier is null || viewModelModifier is null || cursorModifierBag is null || primaryCursorModifier is null)
					return Task.CompletedTask;

				var textEditor = modelModifier;

				// Insert One
				{
					var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(0);
					primaryCursorModifier.LineIndex = lineIndex;
					primaryCursorModifier.ColumnIndex = columnIndex;

					textEditor.Insert(
						"Hello",
				        cursorModifierBag,
				        useLineEndKindPreference: false);

					Assert.Equal("Hello", textEditor.AllText);
					Assert.Equal(2, textEditor.EditBlockList.Count);
					Assert.Equal(1, textEditor.EditBlockIndex);
				}
		
				// Insert Two
				{
					var (lineIndex, columnIndex) = modelModifier.GetLineAndColumnIndicesFromPositionIndex(0);
					primaryCursorModifier.LineIndex = lineIndex;
					primaryCursorModifier.ColumnIndex = columnIndex;

					textEditor.Insert(
						"Abc",
				        cursorModifierBag,
				        useLineEndKindPreference: false);

					Assert.Equal("AbcHello", textEditor.AllText);
					Assert.Equal(3, textEditor.EditBlockList.Count);
					Assert.Equal(2, textEditor.EditBlockIndex);
				}
		
				// redo, redo, undo, undo
				
				// Redo One
				Assert.Throws<LuthetusTextEditorException>(textEditor.Redo);
		
				// Redo Two
				Assert.Throws<LuthetusTextEditorException>(textEditor.Redo);
		
				// Undo One
				textEditor.Undo();
				Assert.Equal("Hello", textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(1, textEditor.EditBlockIndex);
		
				// Undo Two
				textEditor.Undo();
				Assert.Equal(string.Empty, textEditor.AllText);
				Assert.Equal(3, textEditor.EditBlockList.Count);
				Assert.Equal(0, textEditor.EditBlockIndex);

				return Task.CompletedTask;
			});

		await SharedInitializationForTests
			.StartBackgroundTasks(this)
			.Stop();
	}

	private EditLogicTestData EditLogicTestsInitialize(string initialContent)
	{
		SharedInitializationForTests.Initialize(this);
		
		var textEditorService = Services.GetService<ITextEditorService>();

		var resourceUri = new ResourceUri("/unitTesting.txt");
		var viewModelKey = Key<TextEditorViewModel>.NewKey();

		var inModel = new TextEditorModel(
	        resourceUri,
	        DateTime.UtcNow,
	        "txt",
	        initialContent,
	        null,
	        null,
			4_096);

		textEditorService.ModelApi.RegisterCustom(inModel);
		textEditorService.ViewModelApi.Register(viewModelKey, inModel.ResourceUri, new Category("UnitTests"));

		JSInterop.SetupVoid("luthetusTextEditor.disposeTextEditorCursorIntersectionObserver", _ => true);
		JSInterop.SetupVoid("luthetusTextEditor.initializeTextEditorCursorIntersectionObserver", _ => true);
		JSInterop.SetupVoid("luthetusTextEditor.initializeVirtualizationIntersectionObserver", _ => true);
		JSInterop.SetupVoid("luthetusTextEditor.preventDefaultOnWheelEvents", _ => true);

		TextEditorViewModelDisplay? refTextEditorViewModelDisplay = null;

		var cut = Render(
			@<TextEditorViewModelDisplay @ref="refTextEditorViewModelDisplay" TextEditorViewModelKey="viewModelKey"/>);

		Console.WriteLine(cut.GetType());

		var events = new TextEditorViewModelDisplay.TextEditorEvents(
			refTextEditorViewModelDisplay,
			textEditorService.OptionsStateWrap.Value.Options);

		return new EditLogicTestData(
			cut,
			refTextEditorViewModelDisplay,
			events,
			inModel,
			viewModelKey,
			textEditorService);
	}

	private class EditLogicTestData
	{
		public EditLogicTestData(
			IRenderedFragment cut,
			TextEditorViewModelDisplay? refTextEditorViewModelDisplay,
			TextEditorViewModelDisplay.TextEditorEvents events,
			TextEditorModel inModel,
			Key<TextEditorViewModel> viewModelKey,
			ITextEditorService textEditorService)
		{
			Cut = cut;
			RefTextEditorViewModelDisplay = refTextEditorViewModelDisplay;
			Events = events;
			InModel = inModel;
			ViewModelKey = viewModelKey;
			TextEditorService = textEditorService;
		}

		public IRenderedFragment Cut { get; }
		public TextEditorViewModelDisplay? RefTextEditorViewModelDisplay { get; }
		public TextEditorViewModelDisplay.TextEditorEvents Events { get; }
		public TextEditorModel InModel { get; }
		public Key<TextEditorViewModel> ViewModelKey { get; }
		public ITextEditorService TextEditorService { get; }
	}
}
