@using System.Threading
@using System.Text
@using Fluxor
@using Luthetus.Common.RazorLib.Installations.Models
@using Luthetus.Common.RazorLib.BackgroundTasks.Models
@using Luthetus.Common.RazorLib.Dialogs.Models
@using Luthetus.Common.RazorLib.Dialogs.Displays
@using Luthetus.Common.RazorLib.Dynamics.Models
@using Luthetus.Common.RazorLib.Keys.Models
@using Luthetus.Common.RazorLib.Notifications.Displays
@using Luthetus.Common.RazorLib.Notifications.Models
@using Luthetus.Common.RazorLib.Exceptions
@using Luthetus.TextEditor.RazorLib.Characters.Models
@using Luthetus.TextEditor.RazorLib
@using Luthetus.TextEditor.RazorLib.Events.Models
@using Luthetus.TextEditor.RazorLib.Installations.Models
@using Luthetus.TextEditor.RazorLib.TextEditors.Models
@using Luthetus.TextEditor.RazorLib.Lexers.Models
@using Luthetus.TextEditor.RazorLib.TextEditors.Displays
@using Luthetus.TextEditor.RazorLib.Virtualizations.Models
@using Luthetus.TextEditor.RazorLib.Exceptions
@using Luthetus.Ide.RazorLib.Installations.Models

@inherits EditLogicTestBase
@code
{
	[Fact]
	public async Task Test_Initial_Virtualization_Result()
	{
		var (testData, backgroundTaskHandle) = await InitializeTrySomething("public class MyClass\n{\n\t\n}\n");
		await backgroundTaskHandle.Stop();
	}

	[Fact]
	public async Task Test_Initial_Content_Does_Not_Match()
	{
		await Assert.ThrowsAsync<LuthetusFatalException>(async () => await InitializeTrySomething("abc123"));
	}

	[Fact]
	public async Task Insert_Virtualization_Result()
	{
		var (testData, backgroundTaskHandle) = await InitializeTrySomething("public class MyClass\n{\n\t\n}\n");

		await DONT_START_NOR_STOP_BTS_RunTextEditorBackgroundTaskTest(async editContext =>
		{
			var modelModifier = editContext.GetModelModifier(testData.InModel.ResourceUri);
			var viewModelModifier = editContext.GetViewModelModifier(testData.ViewModelKey);
			var cursorModifierBag = editContext.GetCursorModifierBag(viewModelModifier?.ViewModel);
			var primaryCursorModifier = editContext.GetPrimaryCursorModifier(cursorModifierBag);

			if (modelModifier is null || viewModelModifier is null || cursorModifierBag is null || primaryCursorModifier is null)
				return;

			modelModifier.Insert(
				value: "Alphabet Soup",
		        cursorModifierBag: cursorModifierBag,
		        useLineEndKindPreference: false,
		        cancellationToken: CancellationToken.None,
				shouldCreateEditHistory: true);

			editContext.TextEditorService.ViewModelApi.CalculateVirtualizationResult(
				editContext,
			    modelModifier,
			    viewModelModifier,
			    CancellationToken.None);

			ConsoleWriteVirtualizationResultToString(viewModelModifier.ViewModel.VirtualizationResult);
		});

		await backgroundTaskHandle.Stop();
	}

	private void WriteViewModelToConsole(TextEditorViewModel viewModel)
	{
		Console.WriteLine(viewModel.CharAndLineMeasurements);
		Console.WriteLine(viewModel.TextEditorDimensions);
		Console.WriteLine(viewModel.ScrollbarDimensions);

		Console.WriteLine(viewModel.VirtualizationResult.LeftVirtualizationBoundary);
		Console.WriteLine(viewModel.VirtualizationResult.RightVirtualizationBoundary);
		Console.WriteLine(viewModel.VirtualizationResult.TopVirtualizationBoundary);
		Console.WriteLine(viewModel.VirtualizationResult.BottomVirtualizationBoundary);
		Console.WriteLine($"EntryList.Length: {viewModel.VirtualizationResult.EntryList.Length}");
	}

	public void ConsoleWriteVirtualizationResultToString(VirtualizationResult<List<RichCharacter>> virtualizationResult)
	{
		Console.WriteLine("==============");
		Console.WriteLine($"{nameof(VirtualizationResult<List<RichCharacter>>)}:");

		var stringBuilder = new StringBuilder();

		foreach (var entry in virtualizationResult.EntryList)
		{
			foreach (var richCharacter in entry.Item)
			{
				stringBuilder.Append(richCharacter.Value);
			}
		}

		Console.WriteLine(stringBuilder);
		Console.WriteLine("==============");
	}

	/// <summary>
	/// The argument to this method is not "used".
	/// It solely exists so any unit tests which make use of this method
	/// must "handshake" on what the test data is.<br/><br/>
	///
	/// NOTE: To get the values in this "test",
	///       I copy and pasted the test data into its own file, using the IDE itself.
	/// 	  Then I opened the 'WatchWindowDisplay.razor' dialog that shows all the values.
	/// </summary>
	public async Task<(EditLogicTestData testData, SharedInitializationForTests.BackgroundTasksHandle backgroundTasksHandle)> InitializeTrySomething(string predictedInitialContent)
	{
		var initialContent = "public class MyClass\n{\n\t\n}\n";

		if (predictedInitialContent != initialContent)
		{
			throw new LuthetusFatalException($"The {nameof(predictedInitialContent)}: '{predictedInitialContent}', did not match the" +
										     $" {nameof(initialContent)}: '{initialContent}'.");
		}

		// Construct
		var testData = EditLogicTestsInitialize(initialContent);
		Assert.Equal(initialContent, testData.InModel.AllText);
		Assert.Equal(1, testData.InModel.EditBlockList.Count);
		
		var backgroundTaskHandle = SharedInitializationForTests.StartBackgroundTasks(this);

		await DONT_START_NOR_STOP_BTS_RunTextEditorBackgroundTaskTest(editContext =>
		{
			var modelModifier = editContext.GetModelModifier(testData.InModel.ResourceUri);
			var viewModelModifier = editContext.GetViewModelModifier(testData.ViewModelKey);
			var cursorModifierBag = editContext.GetCursorModifierBag(viewModelModifier?.ViewModel);
			var primaryCursorModifier = editContext.GetPrimaryCursorModifier(cursorModifierBag);

			if (modelModifier is null || viewModelModifier is null || cursorModifierBag is null || primaryCursorModifier is null)
				return Task.CompletedTask;

			viewModelModifier.ViewModel = viewModelModifier.ViewModel with
			{
				CharAndLineMeasurements = new(
					CharacterWidth: 16,
					LineHeight: 40),
				TextEditorDimensions = new(
					Width: 1987,
					Height: 1223,
					BoundingClientRectLeft: 668.890625,
					BoundingClientRectTop: 242.28125),
				ScrollbarDimensions = new(
					ScrollLeft: 0,
				    ScrollTop: 0,
				    ScrollWidth: 400,
				    ScrollHeight: 690,
				    MarginScrollHeight: 490),
			};

			WriteViewModelToConsole(viewModelModifier.ViewModel);

			return Task.CompletedTask;
		});

		await DONT_START_NOR_STOP_BTS_RunTextEditorBackgroundTaskTest(editContext =>
		{
			Console.WriteLine($"SECOND");

			var modelModifier = editContext.GetModelModifier(testData.InModel.ResourceUri);
			var viewModelModifier = editContext.GetViewModelModifier(testData.ViewModelKey);
			var cursorModifierBag = editContext.GetCursorModifierBag(viewModelModifier?.ViewModel);
			var primaryCursorModifier = editContext.GetPrimaryCursorModifier(cursorModifierBag);

			if (modelModifier is null || viewModelModifier is null || cursorModifierBag is null || primaryCursorModifier is null)
				return Task.CompletedTask;

			editContext.TextEditorService.ViewModelApi.CalculateVirtualizationResult(
				editContext,
			    modelModifier,
			    viewModelModifier,
			    CancellationToken.None);

			// Left virtualization boundary assertion(s)
			{
				var expectedVirtualizationBoundary = new VirtualizationBoundary(
					WidthInPixels: 0,
					HeightInPixels: 690,
					LeftInPixels: 0,
					TopInPixels: 0);
				var actualVirtualizationBoundary = viewModelModifier.ViewModel.VirtualizationResult.LeftVirtualizationBoundary;
				Assert.Equal(expectedVirtualizationBoundary, actualVirtualizationBoundary);
			}

			// Right virtualization boundary assertion(s)
			{
				var expectedVirtualizationBoundary = new VirtualizationBoundary(
					WidthInPixels: -1584, // Oddity: the application said '-1600' when I was copying and pasting everything into this test.
					HeightInPixels: 690,
					LeftInPixels: 2000,
					TopInPixels: 0);
				var actualVirtualizationBoundary = viewModelModifier.ViewModel.VirtualizationResult.RightVirtualizationBoundary;
				Assert.Equal(expectedVirtualizationBoundary, actualVirtualizationBoundary);
			}

			// Top virtualization boundary assertion(s)
			{
				var expectedVirtualizationBoundary = new VirtualizationBoundary(
					WidthInPixels: 416, // Oddity: the application said '400' when I was copying and pasting everything into this test.
					HeightInPixels: 0,
					LeftInPixels: 0,
					TopInPixels: 0);
				var actualVirtualizationBoundary = viewModelModifier.ViewModel.VirtualizationResult.TopVirtualizationBoundary;
				Assert.Equal(expectedVirtualizationBoundary, actualVirtualizationBoundary);
			}

			// Bottom virtualization boundary assertion(s)
			{
				var expectedVirtualizationBoundary = new VirtualizationBoundary(
					WidthInPixels: 416, // Oddity: the application said '400' when I was copying and pasting everything into this test.
					HeightInPixels: 490,
					LeftInPixels: 0,
					TopInPixels: 200);
				var actualVirtualizationBoundary = viewModelModifier.ViewModel.VirtualizationResult.BottomVirtualizationBoundary;
				Assert.Equal(expectedVirtualizationBoundary, actualVirtualizationBoundary);
			}

			// 0 index virtualization entry assertion(s)
			{
				var actualVirtualizationEntry = viewModelModifier.ViewModel.VirtualizationResult.EntryList[0];
				Assert.Equal(0, actualVirtualizationEntry.Index);
				// Assert.Equal(new List<RichCharacter>(), actualVirtualizationEntry.Item); /* TODO: assert the list entries */
				Assert.Equal(336, actualVirtualizationEntry.WidthInPixels);
				Assert.Equal(40, actualVirtualizationEntry.HeightInPixels);
				Assert.Equal(0, actualVirtualizationEntry.LeftInPixels);
				Assert.Equal(0, actualVirtualizationEntry.TopInPixels);
			}

			// 1 index virtualization entry assertion(s)
			{
				var actualVirtualizationEntry = viewModelModifier.ViewModel.VirtualizationResult.EntryList[1];
				Assert.Equal(1, actualVirtualizationEntry.Index);
				// Assert.Equal(new List<RichCharacter>(), actualVirtualizationEntry.Item); /* TODO: assert the list entries */
				Assert.Equal(32, actualVirtualizationEntry.WidthInPixels);
				Assert.Equal(40, actualVirtualizationEntry.HeightInPixels);
				Assert.Equal(0, actualVirtualizationEntry.LeftInPixels);
				Assert.Equal(40, actualVirtualizationEntry.TopInPixels);
			}

			// 2 index virtualization entry assertion(s)
			{
				var actualVirtualizationEntry = viewModelModifier.ViewModel.VirtualizationResult.EntryList[2];
				Assert.Equal(2, actualVirtualizationEntry.Index);
				// Assert.Equal(new List<RichCharacter>(), actualVirtualizationEntry.Item); /* TODO: assert the list entries */
				Assert.Equal(80, actualVirtualizationEntry.WidthInPixels);
				Assert.Equal(40, actualVirtualizationEntry.HeightInPixels);
				Assert.Equal(0, actualVirtualizationEntry.LeftInPixels);
				Assert.Equal(80, actualVirtualizationEntry.TopInPixels);
			}

			// 3 index virtualization entry assertion(s)
			{
				var actualVirtualizationEntry = viewModelModifier.ViewModel.VirtualizationResult.EntryList[3];
				Assert.Equal(3, actualVirtualizationEntry.Index);
				// Assert.Equal(new List<RichCharacter>(), actualVirtualizationEntry.Item); /* TODO: assert the list entries */
				Assert.Equal(32, actualVirtualizationEntry.WidthInPixels);
				Assert.Equal(40, actualVirtualizationEntry.HeightInPixels);
				Assert.Equal(0, actualVirtualizationEntry.LeftInPixels);
				Assert.Equal(120, actualVirtualizationEntry.TopInPixels);
			}

			// 4 index virtualization entry assertion(s)
			{
				var actualVirtualizationEntry = viewModelModifier.ViewModel.VirtualizationResult.EntryList[4];
				Assert.Equal(4, actualVirtualizationEntry.Index);
				// Assert.Equal(new List<RichCharacter>(), actualVirtualizationEntry.Item); /* TODO: assert the list entries */
				Assert.Equal(0, actualVirtualizationEntry.WidthInPixels);
				Assert.Equal(40, actualVirtualizationEntry.HeightInPixels);
				Assert.Equal(0, actualVirtualizationEntry.LeftInPixels);
				Assert.Equal(160, actualVirtualizationEntry.TopInPixels);
			}

			// DisplayTracker assertion(s)
			{
				var actualDisplayTracker = viewModelModifier.ViewModel.DisplayTracker;
				Assert.Equal(1, actualDisplayTracker.Links);
				Assert.Equal(false, actualDisplayTracker.IsFirstDisplay);
			}

			WriteViewModelToConsole(viewModelModifier.ViewModel);
			ConsoleWriteVirtualizationResultToString(viewModelModifier.ViewModel.VirtualizationResult);
			return Task.CompletedTask;
		});

		return (testData, backgroundTaskHandle);
	}
}
