@using Luthetus.TextEditor.RazorLib
@using Luthetus.Common.RazorLib.Drag
@using Luthetus.Common.RazorLib.Dialog
@using Luthetus.Common.RazorLib.Dimensions
@using Luthetus.Common.RazorLib.Notification
@using Luthetus.Common.RazorLib.Resize
@using Luthetus.Ide.ClassLib.Context
@using Luthetus.Ide.RazorLib.ContextCase
@using Luthetus.Ide.ClassLib.Panel
@using Luthetus.Ide.RazorLib.Panel
@using Luthetus.Common.RazorLib.ShouldRenderBoundaryCase
@using Luthetus.Common.RazorLib.StateHasChangedBoundaryCase
@using Luthetus.Common.RazorLib.Options
@using Luthetus.Ide.Photino.TestApps.TestAppLuthetusCommonCase.InternalComponents.Settings
@using Luthetus.Ide.Photino.TestApps.TestAppLuthetusCommonCase.InternalComponents.RenderCounter
@using Luthetus.Common.RazorLib.EncapsulateEventStateHasChangedCase

@inherits LayoutComponentBase

<ContextBoundary ContextRecord="ContextFacts.GlobalContext"
                 ClassCssString="@($"luth_test-app-luthetus-common-layout {UnselectableClassCss} {AppOptionsService.ThemeCssClassString}")"
                 StyleCssString="@($"{AppOptionsService.FontSizeCssStyleString} {AppOptionsService.FontFamilyCssStyleString}")">

    <RenderCounterDisplay @ref="_renderCounterDisplayComponent"
                          DisplayName="@nameof(TestAppLuthetusCommonLayout)"/>

    <hr />

    <ShouldRenderBoundary>
        <DragInitializer/>
        <DialogInitializer/>
        <NotificationInitializer/>

        <SettingsDialogEntryPoint/>

        <hr/>

        <div class="luth_test-state-has-changed-boundary">
            <div class="luth_test-state-has-changed-boundary-aaa">
                <button class="luth_button"
                        @onclick="async () => await IgnoreOnClickAsync(_stateHasChangedBoundaryComponentAaa.InvokeStateHasChangedAsync)">
                    Invoke:&nbsp;@nameof(_stateHasChangedBoundaryComponentAaa).@nameof(StateHasChangedBoundary.InvokeStateHasChangedAsync)
                </button>

                <StateHasChangedBoundary @ref="_stateHasChangedBoundaryComponentAaa">
                    <RenderCounterDisplay ShouldAutoIncrement="true"
                                          DisplayName="@($"{nameof(TestAppLuthetusCommonLayout)}.{nameof(StateHasChangedBoundary)}.Aaa")" />
                </StateHasChangedBoundary>
            </div>

            <hr />
            
            <div class="luth_test-state-has-changed-boundary-bbb">
                <button class="luth_button"
                        @onclick="async () => await IgnoreOnClickAsync(_stateHasChangedBoundaryComponentBbb.InvokeStateHasChangedAsync)">
                    Invoke:&nbsp;@nameof(_stateHasChangedBoundaryComponentBbb).@nameof(StateHasChangedBoundary.InvokeStateHasChangedAsync)
                </button>

                <StateHasChangedBoundary @ref="_stateHasChangedBoundaryComponentBbb">
                    <RenderCounterDisplay ShouldAutoIncrement="true"
                                          DisplayName="@($"{nameof(TestAppLuthetusCommonLayout)}.{nameof(StateHasChangedBoundary)}.Bbb")" />
                </StateHasChangedBoundary>
            </div>
        </div>
    </ShouldRenderBoundary>
</ContextBoundary>