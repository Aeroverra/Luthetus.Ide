@using Fluxor.Blazor.Web.Components;
@using Luthetus.Common.RazorLib.Contexts.Displays
@using Luthetus.Common.RazorLib.Contexts.Models;
@using Luthetus.Common.RazorLib.Keys.Models;
@using Luthetus.Ide.RazorLib.CompilerServices.Displays.Internals
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax.SyntaxNodes.Expression;
@using Luthetus.TextEditor.RazorLib.TextEditors.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Models.TextEditorModels;
@using Luthetus.TextEditor.RazorLib.CompilerServices.Syntax;
@using Luthetus.CompilerServices.Lang.CSharp.CompilerServiceCase;
@using Luthetus.Ide.RazorLib.CompilerServices.Models;
@using Luthetus.Ide.RazorLib.Editors.States;

<ContextBoundary ContextRecord="ContextFacts.CompilerServiceEditorContext"
                 ClassCssString="luth_ide_compiler-service-editor"
                 StyleCssString="height: 100%">
    <div class="luth_ide_section-title">
        Compiler Service Editor Display
    </div>

    <div class="luth_ide_section-body">

        @{
            var localCSharpCompilerService = _cSharpCompilerService;
            var localCompilerServiceEditorState = CompilerServiceEditorStateWrap.Value;
            var localTextEditorGroupState = TextEditorGroupStateWrap.Value;
            var localTextEditorViewModelState = TextEditorViewModelStateWrap.Value;
            var localTextEditorModelStateWrap = TextEditorModelStateWrap.Value;

            var editorTextEditorGroup = localTextEditorGroupState.GroupList.FirstOrDefault(
                x => x.GroupKey == EditorSync.EditorTextEditorGroupKey);

            var activeViewModelKey = editorTextEditorGroup?.ActiveViewModelKey ?? Key<TextEditorViewModel>.Empty;
        }

        @if (activeViewModelKey == Key<TextEditorViewModel>.Empty)
        {
            <div>activeViewModelKey is Empty</div>
        }
        else
        {
            <div>
                @activeViewModelKey.Guid

                @{
                    var viewModel = localTextEditorViewModelState.ViewModelList.FirstOrDefault(
                            x => x.ViewModelKey == activeViewModelKey);
                }

                @if (viewModel is null)
                {
                    <div>viewModel is not null</div>
                }
                else
                {
                    var interfaceCompilerServiceResource = localCSharpCompilerService
                        .GetCompilerServiceResourceFor(viewModel.ResourceUri);

                    if (interfaceCompilerServiceResource is null)
                    {
                        <div>interfaceCompilerServiceResource is null</div>
                    }
                    else
                    {
                        var cSharpResource = (CSharpResource)interfaceCompilerServiceResource;

                        <div>
                            @cSharpResource.ResourceUri.Value

                            @if (cSharpResource.CompilationUnit is null)
                            {
                                <div>cSharpResource.CompilationUnit is null</div>
                            }
                            else
                            {
                                var textEditorModel = localTextEditorModelStateWrap.ModelList.FirstOrDefault(
                                    x => x.ResourceUri == viewModel.ResourceUri);

                                if (textEditorModel is null)
                                {
                                    <div>textEditorModel is null</div>
                                }
                                else
                                {
                                    var primaryCursorPositionIndex = textEditorModel.GetPositionIndex(viewModel.PrimaryCursor);

                                    if (localCSharpCompilerService.Binder is null)
                                    {
                                        <div>localCSharpCompilerService.Binder is null</div>
                                    }
                                    else
                                    {
                                        var syntaxNode = localCSharpCompilerService.Binder.GetSyntaxNode(
                                            primaryCursorPositionIndex,
                                            cSharpResource.CompilationUnit);

                                        if (syntaxNode is null)
                                        {
                                            <div>syntaxNode is null</div>
                                        }
                                        else
                                        {
                                            if (syntaxNode is IExpressionNode expressionNode)
                                            {
                                                <ExpressionDisplay ExpressionNode="expressionNode" />
                                            }
                                            else if (syntaxNode.SyntaxKind.ToString().Contains("Type") ||
                                                     syntaxNode.SyntaxKind == SyntaxKind.InheritanceStatementNode ||
                                                     syntaxNode.SyntaxKind == SyntaxKind.ConstraintNode ||
                                                     syntaxNode.SyntaxKind == SyntaxKind.AttributeNode)
                                            {
                                                <TypeDisplay SyntaxNode="syntaxNode"/>
                                            }
                                            else if (syntaxNode.SyntaxKind.ToString().Contains("Variable"))
                                            {
                                                <VariableDisplay SyntaxNode="syntaxNode"/>
                                            }
                                            else if (syntaxNode.SyntaxKind.ToString().Contains("Property"))
                                            {
                                                <PropertyDisplay SyntaxNode="syntaxNode"/>
                                            }
                                            else if (syntaxNode.SyntaxKind.ToString().Contains("Function"))
                                            {
                                                <FunctionDisplay SyntaxNode="syntaxNode"/>
                                            }
                                            else if (syntaxNode.SyntaxKind.ToString().Contains("Generic"))
                                            {
                                                <GenericDisplay SyntaxNode="syntaxNode"/>
                                            }
                                            else if (syntaxNode.SyntaxKind.ToString().Contains("Namespace") ||
                                                     syntaxNode.SyntaxKind == SyntaxKind.UsingStatementNode)
                                            {
                                                <NamespaceDisplay SyntaxNode="syntaxNode"/>
                                            }
                                            else if (syntaxNode.SyntaxKind.ToString().Contains("Operator"))
                                            {
                                                <OperatorDisplay SyntaxNode="syntaxNode" />
                                            }
                                            else if (syntaxNode.SyntaxKind.ToString().Contains("Constructor"))
                                            {
                                                <ConstructorDisplay SyntaxNode="syntaxNode" />
                                            }
                                            else if (syntaxNode.SyntaxKind.ToString().Contains("ObjectInitialization"))
                                            {
                                                <ObjectInitializationDisplay SyntaxNode="syntaxNode" />
                                            }
                                            else if (syntaxNode.SyntaxKind == SyntaxKind.AmbiguousIdentifierNode)
                                            {
                                                <AmbiguousIdentifierDisplay SyntaxNode="syntaxNode" />
                                            }
                                            else if (syntaxNode.SyntaxKind == SyntaxKind.IfStatementNode)
                                            {
                                                <IfStatementDisplay SyntaxNode="syntaxNode" />
                                            }
                                            else
                                            {
                                                switch (syntaxNode.SyntaxKind)
                                                {
                                                    case SyntaxKind.PreprocessorLibraryReferenceStatementNode:
                                                        <div>PreprocessorLibraryReferenceStatementNode</div>
                                                        break;
                                                    case SyntaxKind.EmptyNode:
                                                        <div>EmptyNode</div>
                                                        break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        </div>
                    }
                }
            </div>
        }
    </div>
</ContextBoundary>
