@using System.Reflection;
<div class="luth_ide_info">

    @{ var ideAssembly = typeof(IdeInfoDisplay).Assembly; }

    <div class="luth_ide_info-main">
        <div>
            Version: @ideAssembly.GetName().Version
        </div>
        <div>
            Source Code:
            <a target="_blank"
               href="https://github.com/Luthetus/Luthetus.Ide">
                
               Luthetus.Ide
            </a>
        </div>
        <div>
            Recent Changes:
			<div>
                <div>
                    <div>v <em class="luth_em">0.7.4.0</em> (2024-02-03)</div>
                    
                    <ul>
                        <li>
                            Fix the IDE freezing "randomly":
                            I wrote the <a href="https://github.com/Luthetus/Luthetus.Ide/blob/main/Luthetus.Common/Source/Lib/Luthetus.Common.RazorLib/Reactives/Models/Throttle.cs">Throttle.cs</a> initially as async.
                            But if the source that wants to be throttled awaits the throttle timer,
                            its just sort of nonsense, right?
                            I believe this was locking.
                            Now its a fire and forget, so the invoker doesn't have to await the
                            throttle.
                        </li>
                    </ul>
                </div>
                <div>
                    <div>v <em class="luth_em">0.7.3.0</em> (2024-02-02)</div>
                    
                    <ul>
                        <li>
                            A preview text editor when using 'Code Search' ({ Ctrl + , } written out: "Control + Comma").
                        </li>
                        <li>
                            The most recently interacted with Dialog will render above any other. (this refers to
                            two dialogs overlapping).
                        </li>
                        <li>
                            A newly opened dialog will be set as focused (this is for keyboard usage ease of use).
                        </li>
                        <li>
                            Open a find overlay within a texteditor: { Ctrl + f }
                        </li>
                    </ul>
                </div>
                <div>
                    <div>v <em class="luth_em">0.7.2.0</em> (2024-01-31)</div>
                    
                    <ul>
                        <li>Add usings when autocompleting a type</li>
                        <li>GUI editor for C# Compiler Service. (follows the text editor cursor)</li>
                        <li>A file cannot be deleted unless it is first given deletion rights</li>
                        <li>
                            'Ctrl + ,' progress (only searches on files are being done.
                            Clicking a resulting file will open that file in the text editor)
                            </li>
                        <li>'Ctrl + Shift + F' progress (the search query, find all button,
                            and file system path to seach in are the only UI elements
                            in effect currently). A list gets made at the bottom of the dialog
                            wth the results, and clicking a result will open that file in the
                            text editor.
                        </li>
                    </ul>
                </div>
                <div>
                    <div>v <em class="luth_em">0.7.1.0</em> (2024-01-26)</div>
                    
                    <ul>
                        <li>Import repositories from GitHub</li>
                    </ul>
                </div>
                <div>v <em class="luth_em">0.7.0.0</em> (2024-01-23)</div>
                <ul>
                    <li>
                        Added all storage types. (struct, class, interface, enum, record)
                    </li>
                </ul>
                <ul>
                    <li>
                        Added Primary constructors (for records only at the moment)
                    </li>
                </ul>
                <ul>
                    <li>
                        Object initialization (new Type { Property = Value, })
                    </li>
                </ul>
                <ul>
                    <li>
                        Improved 'var' contextual keyword. (detecting it as a keyword or an identifier)
                    </li>
                </ul>
                <ul>
                    <li>
                        Generic Type syntax highlighting. (List&lt;int&gt; myVariable;)
                    </li>
                </ul>
                <ul>
                    <li>
                        The following syntaxes are now expressions: constructor invocation, variable references, function invocation.
                    </li>
                </ul>
                <ul>
                    <li>
                        If parser throws an exception, still draw the valid Lexer syntax highlighting. (lexer syntax highlighting does the keywords, and more syntactic related things)
                    </li>
                </ul>
                <ul>
                    <li>
                        Added access modifiers to type definition. (public, "protected internal", protected, internal, "private protected", private).
                        Usage of access modifiers is not yet implemented, only the parsing of them.
                    </li>
                </ul>
                <ul>
                    <li>
                        Added the "partial" modifier to type definition. 
                        Usage of the modifier is not yet implemented, only the parsing of it.
                    </li>
                </ul>
                <div>v <em class="luth_em">0.6.0.0</em> (2024-01-19)</div>
                <ul>
                    <li>
                        Fixed 'Go To Definition' (F12 when in text editor)
                    </li>
					<li>
                        Fixed 'Go To Matching Character' ("Ctrl + ]" when in text editor.
                        Holding shift will select the text.)
                    </li>
                    <li>
                        Improved the C# Compiler Service, namespaces
                        were changed the most.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="luth_em">0.5.0.0</em> (2024-01-14)</div>
                <ul>
                    <li>
                        Tab characters are rendered properly when scrolling
						horizontally in the text editor.
                    </li>
					<li>
                        Fix the majority of bugs that came about
						from the re-write of the Text Editor for immutability.
                    </li>
                    <li>
                        Progress on tree view for multi-selecting nodes
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="luth_em">0.4.0.0</em> (2024-01-02)</div>
                <ul>
                    <li>
                        Unit Test Explorer
                    </li>
                    <li>
                        Re-write text editor for immutability
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="luth_em">0.2.0.0</em> (2023-10-21)</div>
                <ul>
                    <li>
                        C# Autocompletion via Binder
                    </li>
                    <li>
                        C# Parsing improvements
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="luth_em">0.1.1.0</em> (2023-10-04)</div>
                <ul>
                    <li>
                        Keymaps to navigate user's focus with the keyboard to PanelTabs.
                    </li>
                    <li>
                        (Example:) "Ctrl + Alt + S" => Set focus to solution explorer. Also,
                        if the solution explorer isn't the active tab, make it the active tab.
                    </li>
                    <li>
                        The active contexts panel tab (default position is in bottom panel) will
                        show the keymap available given the user's focus. Use the "Inspect Element" like
                        functionality to lock the Context so you can see the keymap without losing it once
                        you click on the active contexts panel tab to view the keymap.
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <hr/>

    <div class="luth_ide_info-references">
        <div>
            References
        </div>

        @{
            var referencedLuthetusAssembliesList = ideAssembly
                .GetReferencedAssemblies()
                .Where(x => x.Name is not null && x.Name.StartsWith("Luthetus"));
        }

        @foreach (var referencedLuthetusAssembly in referencedLuthetusAssembliesList)
        {
            if (referencedLuthetusAssembly.Name is null)
                continue;

            var repoName = referencedLuthetusAssembly.Name.Replace(".RazorLib", string.Empty);
            var hrefForReferencedLuthetusAssembly = $"https://github.com/Luthetus/{repoName}";

            if (referencedLuthetusAssembly.Name.Contains("Luthetus.CompilerServices"))
            {
                var compilerServiceRepoBaseHref = "https://github.com/Luthetus/Luthetus.CompilerServices/tree/main/Source/";

                var languageName = referencedLuthetusAssembly.Name.Split('.').Last();

                hrefForReferencedLuthetusAssembly = compilerServiceRepoBaseHref + languageName + "/Source/";
            }

            <div>
                v
                <em class="luth_em" title="Version">
                    @(referencedLuthetusAssembly.Version)
                </em>
                ::
                @referencedLuthetusAssembly.Name
            </div>
        }
    </div>
</div>