@using Luthetus.Common.RazorLib.Contexts.Displays
@using Luthetus.Common.RazorLib.Contexts.Models;
@using Luthetus.CompilerServices.Lang.CSharp.BinderCase;
@using Luthetus.CompilerServices.Lang.CSharp.LexerCase;
@using Luthetus.CompilerServices.Lang.CSharp.ParserCase;

<ContextBoundary ContextRecord="ContextFacts.SolutionExplorerContext"
                 ClassCssString="luth_ide_c-sharp-repl"
                 StyleCssString="height: 100%">

    <div class="luth_ide_section-title">
        C# REPL (#TODO: )
    </div>

    <div class="luth_ide_section-body">

        <ErrorBoundary> 
            <input class="luth_ide_input luth_ide_input-text"
                   style="height: 2em;"
                   placeholder="Project name"
                   @bind="Input"
                   @bind:event="oninput" />

            <hr/>

            <div class="luth_ide_c-sharp-repl-output">
            
                @{
                    var localCompilationUnit = _compilationUnit;
                    var localEvaluatorResult = _evaluatorResult;
                }

                @if (localCompilationUnit is null)
                {
                    <div>
                        CompilationUnit is null
                    </div>
                }
                else
                {
                    var cSharpLexer = (CSharpLexer)localCompilationUnit.Lexer;
                    var cSharpParser = (CSharpParser)localCompilationUnit.Parser;
                    var cSharpBinder = (CSharpBinder)localCompilationUnit.Binder;
                    var diagnosticsList = localCompilationUnit.DiagnosticsList;

                    <div>
                        <div>
                            Lexer:
                        
                            <div>
                                SyntaxTokens.Length: @cSharpLexer.SyntaxTokens.Length
                            </div>
                        </div>
                        <div>
                            Parser:

                            <div>
                                #TODO 
                            </div>
                        </div>
                        <div>
                            Binder:

                            <div>
                                #TODO 
                            </div>
                        </div>
                        <div>
                            DiagnosticsList:

                            <div>
                                Length: @diagnosticsList.Length
                            </div>
                        </div>
                    </div>
                }
            
                @if (localEvaluatorResult is null)
                {
                    <div>
                        EvaluatorResult is null
                    </div>
                }
                else
                {
                    var typeFullNameString = localEvaluatorResult.Type.FullName ?? "EvaluatorResult.Type.FullName was null";
                    var resultString = localEvaluatorResult.Result.ToString();

                    <div>
                        <div>
                            @typeFullNameString
                        </div>
                        <div>
                            @resultString
                        </div>
                    </div>
                }

                @if (_exception is not null)
                {
                    <div>
                        EXCEPTION:&nbsp;@_exception.ToString()
                    </div>
                }
            </div>
        </ErrorBoundary>
    </div>
</ContextBoundary>