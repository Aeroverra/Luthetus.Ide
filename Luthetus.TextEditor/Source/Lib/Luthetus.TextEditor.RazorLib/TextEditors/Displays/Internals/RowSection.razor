@using Luthetus.TextEditor.RazorLib.Rows.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Models.TextEditorModels;
@using Luthetus.TextEditor.RazorLib.Virtualizations.Displays
@using System.Text;
@using Luthetus.TextEditor.RazorLib.Virtualizations.Models;
@using Luthetus.Common.RazorLib.Keys.Models;

<div class="luth_te_row-section"
     id="@RenderBatch.ViewModel!.BodyElementId">
    
    @* VirtualizationDisplay must be rendered first as it will modify the scrollHeight / scrollWidth of the scrollable parent *@
    <VirtualizationDisplay VirtualizationResultWithoutTypeMask="RenderBatch.ViewModel!.VirtualizationResult"
                           ItemsProviderFunc="VirtualizationDisplayItemsProviderFunc"/>

    <PresentationLayerGroup PrimaryCursor="PrimaryCursor"
                            CssClassString="luth_te_first-presentation-layer-group"
                            TextEditorPresentationKeys="RenderBatch.ViewModel!.FirstPresentationLayerKeysList" />

    <TextSelectionGroup PrimaryCursor="PrimaryCursor"/>

    <PresentationLayerGroup PrimaryCursor="PrimaryCursor"
                            CssClassString="luth_te_last-presentation-layer-group"
                            TextEditorPresentationKeys="RenderBatch.ViewModel.LastPresentationLayerKeysList" />

    <TextEditorWidgetInlineLayerDisplay/>

    @foreach (var virtualizedRow in RenderBatch.ViewModel!.VirtualizationResult.EntryList)
    {
        <div class="luth_te_row"
             style="@GetRowStyleCss(virtualizedRow.Index, virtualizedRow.LeftInPixels)">
            @if (virtualizedRow.Item.Any())
            {
                var spanBuilder = new StringBuilder();

                @*
                    Rich characters are being removed. Instead of 1 list of RichCharacters,
                    there will be 1 list of the char(s) and 1 list of the decoration bytes.

                    TODO: As such, this code broke, and needs to be changed accordingly....
                          ...Until then the decoration byte of '0' will be used.

                    (2024-04-10)
                *@
                var currentDecorationByte = (byte)0;

                foreach (var character in virtualizedRow.Item)
                {
                    if (currentDecorationByte == 0)
                    {
                        AppendTextEscaped(spanBuilder, character, TabKeyOutput, SpaceKeyOutput);
                    }
                    else
                    {
                        <span class="@GetCssClass(currentDecorationByte)">
                            @((MarkupString)spanBuilder.ToString())
                        </span>

                        spanBuilder.Clear();

                        AppendTextEscaped(spanBuilder, character, TabKeyOutput, SpaceKeyOutput);

                        currentDecorationByte = 0;
                    }
                }

                /* Final grouping of contiguous characters */
                <span class="@GetCssClass(currentDecorationByte)">
                    @((MarkupString)spanBuilder.ToString())
                </span>
            }

            @if (GlobalShowNewlines && virtualizedRow.Index < RenderBatch.Model!.RowCount - 1)
            {
                var amountOfLeftInCharacterWidthUnits = virtualizedRow.LeftInPixels /
                    RenderBatch.ViewModel.VirtualizationResult!.CharAndRowMeasurements.CharacterWidth;

                var lengthOfRow = RenderBatch.Model!.GetLengthOfRow(virtualizedRow.Index, true);

                if (amountOfLeftInCharacterWidthUnits < lengthOfRow)
                {
                    var rowEndingTuple = RenderBatch.Model!.RowEndingPositionsList[virtualizedRow.Index];

                    <span class="luth_te_newline">
                        @rowEndingTuple.RowEndingKind.AsCharactersHtmlEscaped()
                    </span>
                }
            }
        </div>
    }

    <CursorDisplay @ref="CursorDisplayComponent"
                   Cursor="RenderBatch.ViewModel!.PrimaryCursor"
                   ScrollableContainerId="@RenderBatch.ViewModel!.BodyElementId"
                   IsFocusTarget="true"
                   TabIndex="TabIndex"
                   IncludeContextMenuHelperComponent="IncludeContextMenuHelperComponent">

        <OnContextMenuRenderFragment>
            @if (ContextMenuRenderFragmentOverride is not null)
            {
                @ContextMenuRenderFragmentOverride
            }
            else
            {
                <ContextMenu/>
            }
        </OnContextMenuRenderFragment>
        <AutoCompleteMenuRenderFragment>
            @if (AutoCompleteMenuRenderFragmentOverride is not null)
            {
                @AutoCompleteMenuRenderFragmentOverride
            }
            else
            {
                <AutocompleteMenu/>
            }
        </AutoCompleteMenuRenderFragment>
    </CursorDisplay>
</div>