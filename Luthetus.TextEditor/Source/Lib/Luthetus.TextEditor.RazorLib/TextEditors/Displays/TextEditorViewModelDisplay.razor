@using Luthetus.Common.RazorLib.Contexts.Displays
@using Luthetus.Common.RazorLib.Contexts.Models;
@using Luthetus.TextEditor.RazorLib.Options.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Displays.Internals
@using Luthetus.TextEditor.RazorLib.TextEditors.Models;
@using Luthetus.TextEditor.RazorLib.TextEditors.Models.Internals;

@{
    var renderBatch = _storedRenderBatch;

    var contextBoundaryStyle = $"{renderBatch.FontSizeInPixelsCssStyleString} {renderBatch.FontFamilyCssStyleString} {GetGlobalHeightInPixelsStyling()} {ViewModelDisplayOptions.WrapperStyleCssString}";
    var contextBoundaryClass = $"luth_te_text-editor-css-wrapper {TextEditorService.ThemeCssClassString} {ViewModelDisplayOptions.WrapperClassCssString}";
}

<ContextBoundary ContextRecord="ContextFacts.TextEditorContext"
                 ClassCssString="@contextBoundaryClass"
                 StyleCssString="@contextBoundaryStyle">

    @if (renderBatch.IsValid && !renderBatch.Options!.UseMonospaceOptimizations)
    {
        <div style="display: flex; position: absolute; visibility: hidden;"
             id="@ProportionalFontMeasurementsContainerElementId">
        </div>
    }

    <CascadingValue Value="renderBatch">
        <CascadingValue Name="ProportionalFontMeasurementsContainerElementId" Value="ProportionalFontMeasurementsContainerElementId">

            @if (renderBatch.IsValid && ViewModelDisplayOptions.IncludeHeaderHelperComponent)
            {
                <TextEditorHeader HeaderButtonKinds="ViewModelDisplayOptions.HeaderButtonKinds" />
            }

            <div @onclick="FocusTextEditorAsync"
            @onkeydown="HandleOnKeyDownAsync"
            @onkeydown:preventDefault="true"
            @oncontextmenu="HandleOnContextMenuAsync"
            @oncontextmenu:preventDefault="true"
            @onmousedown="HandleContentOnMouseDownAsync"
            @onmousemove="HandleContentOnMouseMoveAsync"
            @onmouseout="HandleContentOnMouseOut"
            @ondblclick="HandleContentOnDoubleClickAsync"
            @onwheel="HandleOnWheelAsync"
            @ontouchstart="HandleOnTouchStartAsync"
            @ontouchmove="HandleOnTouchMoveAsync"
            @ontouchend="ClearTouchAsync"
            @ontouchcancel="ClearTouchAsync"
            @ontouchleave="ClearTouchAsync"
                 id="@ContentElementId"
                 style="@ViewModelDisplayOptions.TextEditorStyleCssString"
                 class="luth_te_text-editor luth_unselectable @ViewModelDisplayOptions.TextEditorClassCssString"
                 tabindex="-1">

                <MeasureCharacterWidthAndRowHeight @ref="_measureCharacterWidthAndRowHeightComponent"
                                                   HtmlElementId="@MeasureCharacterWidthAndRowHeightElementId" />

                @if (renderBatch.IsValid)
                {
                    <CascadingValue Value="_tooltipViewModel">
                        <GutterSection />

                        <BodySection @ref="_bodySectionComponent"
                                     TabIndex="ViewModelDisplayOptions.TabIndex"
                                     ContextMenuRenderFragmentOverride="ViewModelDisplayOptions.ContextMenuRenderFragmentOverride"
                                     IncludeContextMenuHelperComponent="ViewModelDisplayOptions.IncludeContextMenuHelperComponent"
                                     AutoCompleteMenuRenderFragmentOverride="ViewModelDisplayOptions.AutoCompleteMenuRenderFragmentOverride" />

                        @if (renderBatch.ViewModel!.DisplayCommandBar)
                        {
                            <CommandBarDisplay RestoreFocusToTextEditor="FocusTextEditorAsync" />
                        }
                    </CascadingValue>
                }
                else
                {
                    if (renderBatch.Model is null)
                    {
                        <div>The @nameof(TextEditorModel) was null</div>
                    }
                    else if (renderBatch.ViewModel is null)
                    {
                        <div>The @nameof(TextEditorViewModel) was null</div>
                    }
                    else if (renderBatch.Options is null)
                    {
                        <div>The @nameof(TextEditorOptions) was null</div>
                    }
                }
            </div>

            @if (renderBatch.IsValid && ViewModelDisplayOptions.IncludeFooterHelperComponent)
            {
                <TextEditorFooter />
            }

        </CascadingValue>
    </CascadingValue>
</ContextBoundary>