@using Fluxor.Blazor.Web.Components;
@using Luthetus.Common.RazorLib.Tabs.Displays
@using Luthetus.TextEditor.RazorLib.SearchEngines.Models;

@inherits FluxorComponent

@{
    var searchEngineState = TextEditorSearchEngineStateWrap.Value;
    var tabGroup = TabStateGroupSelection.Value;
}

<div class="luth_te_find">
    <div class="luth_te_find-tabs">
        @foreach (var searchEngine in searchEngineState.SearchEngineList)
        {
            <SearchEngineTabDisplay SearchEngine="searchEngine"
                                    IsActive="searchEngine.SearchEngineKey == searchEngineState.ActiveSearchEngineKey" />
        }
    </div>

    <hr/>

    <TabGroupDisplay TabGroupKey="SelectedSearchEngineTabGroupKey"/>

    <hr />

    <div class="luth_te_find-body">

        SearchQuery:&nbsp;

        <input class="luth_input"
               @bind="SearchQuery"
               @bind:event="oninput"/>

        <button class="luth_button"
                @onclick="() => DoSearchOnClickAsync(searchEngineState)">
            Do Search
        </button>

        @{ var activeSearchEngine = searchEngineState.GetActiveSearchEngineOrDefault(); }

        @if (activeSearchEngine is null)
        {
            @: null active find provider
        }
        else
        {
            @: @activeSearchEngine.DisplayName
        }

        @if (_isSearching)
        {
            <IconLoading/>
        }
        else
        {
            <div>
                Not Searching
            </div>
        }

		@if (activeSearchEngine is SearchEngineFileSystem searchEngineFileSystem)
		{
			<SearchEngineFileSystemDisplay SearchEngineFileSystem="searchEngineFileSystem"/>
		}
    </div>
</div>