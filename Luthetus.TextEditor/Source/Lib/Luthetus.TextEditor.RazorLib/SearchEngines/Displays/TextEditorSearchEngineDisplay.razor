@using Fluxor.Blazor.Web.Components;
@using Luthetus.Common.RazorLib.Keys.Models;
@using Luthetus.Common.RazorLib.Tabs.Displays
@using Luthetus.Common.RazorLib.Tabs.Models;
@using Luthetus.TextEditor.RazorLib.SearchEngines.Models;

@inherits FluxorComponent

@{
    var searchEngineState = TextEditorSearchEngineStateWrap.Value;
    var tabGroup = TabStateGroupSelection.Value;
}

<div class="luth_te_find">
    
    <TabGroupDisplay TabGroupKey="SelectedSearchEngineTabGroupKey"/>

    <hr />

    <div class="luth_te_find-body">
        @if (tabGroup is null)
        {
            <div>@nameof(tabGroup) is null</div>
        }
        else
        {
            var tabEntryNoType = tabGroup.GetActiveEntryNoType();

            if (tabEntryNoType is null)
            {
                <div>@nameof(tabEntryNoType) is null</div>
            }
            else
            {
                var tabEntryWithType = (TabEntryWithType<Key<ITextEditorSearchEngine>>)tabEntryNoType;
                var activeSearchEngine = searchEngineState.SearchEngineList.FirstOrDefault(x => x.Key == tabEntryWithType.Item);

                if (activeSearchEngine is null)
                {
                    <div>@nameof(activeSearchEngine) is null</div>
                }
                else
                {
                    <div>
                        SearchQuery:&nbsp;

                        <input class="luth_ide_input luth_ide_input-text"
                               placeholder="@nameof(SearchQuery)"
                               @bind="SearchQuery"
                               @bind:event="oninput" />

                        <button class="luth_button"
                                @onclick="() => DoSearchOnClickAsync(searchEngineState, activeSearchEngine)">
                            Do Search
                        </button>

                        @if (activeSearchEngine is null)
                        {
                            @: null active find provider
                        }
                        else
                        {
                            @: @activeSearchEngine.DisplayName
                        }

                        @if (_isSearching)
                        {
                            <IconLoading />
                        }
                        else
                        {
                            <div>
                                Not Searching
                            </div>
                        }

                        @if (activeSearchEngine is SearchEngineFileSystem searchEngineFileSystem)
                        {
                            <SearchEngineFileSystemDisplay SearchEngineFileSystem="searchEngineFileSystem" />
                        }
                    </div>
                }
            }
        }
    </div>
</div>